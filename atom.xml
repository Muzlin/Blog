<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MuzLin</title>
  
  <subtitle>燃烧吧！狗日的生活!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.muzlin.cn/"/>
  <updated>2018-04-11T03:17:31.921Z</updated>
  <id>http://www.muzlin.cn/</id>
  
  <author>
    <name>MuzLin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS深入浅出</title>
    <link href="http://www.muzlin.cn/2018/04/08/CSS%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://www.muzlin.cn/2018/04/08/CSS深入浅出/</id>
    <published>2018-04-08T14:44:29.000Z</published>
    <updated>2018-04-11T03:17:31.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTML 1991年由李爵士提出<br>CSS 1994年由哈肯·维姆·莱和伯特·波斯合作设计</p></blockquote><a id="more"></a><h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><p><code>HTML比CSS早出现，那么没有CSS之前网页是如何添加样式的呢？</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">red</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>居中标题<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span>蓝色标题<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有css之前用过html的标签和属性来添加样式。</p><p><code>CSS出来后怎么给网页加样式？</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">      background:red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    h2&#123;</span></span><br><span class="line"><span class="undefined">      text-align:center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    h3&#123;</span></span><br><span class="line"><span class="undefined">      color:blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>居中标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>蓝色标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了css之后用css专门给网页添加样式。</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css01-20180405.png" alt="0.yt2gafj2v2o"></p><p><code>使用CSS的几种方式</code></p><ul><li>行内样式 <code>&lt;h1 style=&#39;color:red;&#39;&gt;&lt;/h1&gt;</code></li><li>外链样式 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code></li><li>内联样式 <code>&lt;style&gt;h1{ color:red; }&lt;/style&gt;</code></li></ul><h2 id="怎么学习"><a href="#怎么学习" class="headerlink" title="怎么学习"></a>怎么学习</h2><p><code>难学、难理解的地方</code></p><ul><li>属性多</li></ul><blockquote><p>CSS的难学程度从他的规范完档可见一般，属性特别多一般人是很难去记忆的，反正我是不行。<br><a href="http://www.ayqy.net/doc/css2-1/cover.html" target="_blank" rel="noopener">css2.1规范</a></p></blockquote><ul><li>不正交</li></ul><blockquote><p>CSS中的有些属性相互影响，CSS中有些属性会影响其它属性的样式。<br>这种不正交的特性使CSS特别难以理解。</p></blockquote><p><code>好学、熟悉套路</code></p><blockquote><p>工作中，对于CSS的要求并不高。我们只需要熟悉常见的套路，比如布局的几种方式、居中的几种写法等一些常见的套路就足以满足工作所需。非特殊情况不需要去深入了解他的机理，就算你去深入也不一定能清楚。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="宽度与高度"><a href="#宽度与高度" class="headerlink" title="宽度与高度"></a>宽度与高度</h4><ul><li>内联元素（inline）的宽高</li></ul><blockquote><p>内联元素的高度由行高决定，<code>width</code>、<code>height</code>、<code>padding</code>等属性不会改变内联元素的高度，但是宽度会受<code>padding</code>、<code>margin</code>、<code>border</code>的影响。</p></blockquote><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018040904.png" alt=""></p><ul><li>块级元素的宽高</li></ul><blockquote><p>块级元素的宽高由里面的所有文档流元素高度的总和决定。</p></blockquote><p><code>块级元素里面只有一个内联元素的时候高度由内联元素的行高决定</code></p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018040703.png" alt=""></p><p>字体的默认行高由字体设计师决定。</p><p>Tricks:</p><p>中文对齐，<code>e.g. 两行中文对齐的问题</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">姓   名</span><br><span class="line">联系方式</span><br><span class="line">// 比较傻的前端会这样做 </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>姓&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">// 如果这个字体设计的时候刚好一个字===两个空格 那就是运气好，如果一个字===2.2个空格 那这样永远也对不齐</span><br><span class="line"></span><br><span class="line">// 正确的做法</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    span&#123;</span></span><br><span class="line"><span class="undefined">      display:inline-block;</span></span><br><span class="line"><span class="undefined">      text-align:justify;</span></span><br><span class="line"><span class="undefined">      width:110px;</span></span><br><span class="line"><span class="undefined">      height:18px;</span></span><br><span class="line"><span class="undefined">      overflow:hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    span::after&#123;</span></span><br><span class="line"><span class="undefined">      content:'';</span></span><br><span class="line"><span class="undefined">      display:inline-block;</span></span><br><span class="line"><span class="undefined">      border:1px solid red;</span></span><br><span class="line"><span class="undefined">      width:100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018040704.png" alt=""></p><p><code>块级元素里面有块级元素的时候</code></p><p><code>height</code>属性会影响块级元素的高度</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018040902.png" alt=""></p><p>值得注意的是当块级元素里面有块级元素的时候如果外面的块级元素没有边界比如<code>border</code>会产生<code>margin</code>合并</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018040903.png" alt=""></p><p>这里是CSS里面比较令人费解的</p><blockquote><p>所以<code>margin</code>能否使它的父元素变高取决于它的父元素是否有<code>border</code>遮挡,或者用<code>overflow:hidden</code>用于取消<code>margin</code>合并，或者直接使用<code>padding</code>属性来达到效果</p><p>CSS中，不到特殊情况，千万不要写<code>height</code>属性，不然总会出现一些BUG。</p><ul><li>因为宽高定死之后，如果文字变多，会出现奇怪的样式</li><li>因为宽高定死之后，如果用户缩小窗口大小，会出现滚动条，影响体验</li><li>height 可以用 line-height 和 padding 来撑，这样写更灵活美观</li><li>width: 100% 再加上 padding 就会撑出父元素之外，很难看</li><li>不写死宽高，页面就是响应式的</li></ul></blockquote><p><code>前面说了元素的高度由里面所有的文档流元素高度总和决定，如果某个元素脱离了文档流就不会将它的高度算进去。换个说法，脱离 文档流的意思就是：算高度的时候不要算上它</code></p><p>脱离文档流的属性有<code>float、position:fixed、absolute</code>相对定位<code>position:relative</code>不会脱离文档流</p><p>Tricks:</p><p>垂直居中 <code>pandding:10px 0;</code></p><p>水平居中 <code>margin:0 auto;</code></p><p>宽度确定的盒模型里面的div居中 <code>dispaly:flex;justify-content:center;align-items:center;</code></p><h4 id="堆叠上下文"><a href="#堆叠上下文" class="headerlink" title="堆叠上下文"></a>堆叠上下文</h4><ul><li>堆叠顺序</li></ul><p><code>元素并不是都在一个平面。而是一层一层的排列</code></p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041001.png" alt=""></p><blockquote><ul><li>background</li><li>border</li><li>块级</li><li>浮动</li><li>内联</li><li>z-index: 0</li><li>z-index: +</li></ul></blockquote><ul><li>堆叠上下文</li></ul><p><code>可以理解为堆叠作用域。跟 BFC 一样，我们只知道一些属性会触发堆叠上下文，但并不知道堆叠上下文是什么。</code></p><blockquote><p>根元素 (HTML),<br>z-index 值不为 “auto”的 绝对/相对定位，<br>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex，<br>opacity 属性值小于 1 的元素（参考 the specification for opacity），<br>transform 属性值不为 “none”的元素，<br>mix-blend-mode 属性值不为 “normal”的元素，<br>filter值不为“none”的元素，<br>perspective值不为“none”的元素，<br>isolation 属性被设置为 “isolate”的元素，<br>position: fixed<br>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值（参考 这篇文章）<br>-webkit-overflow-scrolling 属性被设置 “touch”的元素</p></blockquote><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041102.gif" alt=""></p><p><code>传统布局</code></p><blockquote><p>传统布局基于<a href="https://developer.mozilla.org/enUS/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">盒状模型</a><br>依赖改变盒模型<code>dispaly</code>定位<code>position</code>浮动<code>float</code>来解决，这种方式对于一些特殊的效果不容易实现比如<code>垂直居中</code></p></blockquote><p><code>Flex（Flexible Box）布局</code></p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041101.png" alt=""></p><blockquote><p>一种新的布局方式<code>Flex</code>布局，Flex 布局，可以简便、完整、响应式地实现各种页面布局<br>块级布局侧重垂直方向，行内布局侧重水平方向，flex布局<code>与方向无关</code><br>flex布局可以实现<code>空间自动分配</code> <code>自动对齐</code><br>flex适用于<code>简单的线性布局</code>，更复杂的布局要用<code>grid</code>布局实现</p></blockquote><ul><li>默认的<code>flex</code>布局样式</li></ul><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041103.png" alt=""></p><ul><li><code>flex container</code>属性</li></ul><pre><code>flex-direction方向，默认值row</code></pre><p><code>flex-direction:column</code></p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041104.png" alt=""></p><p><code>flex-direction:column-reverse</code>反向</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041105.png" alt=""></p><pre><code>flex-wrap换行</code></pre><p><code>flex-wrap:wrap</code>超出部分换行</p><p><code>flex-wrap:nowrap</code>不换行，超出挤压</p><pre><code>justify-content主轴对齐方式</code></pre><p><code>justify-content:center</code>居中(多余内容丢两边)</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041106.png" alt=""></p><p><code>justify-content:flex-end</code>靠向终点(多余内容丢起点)</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041107.png" alt=""></p><p><code>justify-content:flex-start</code>靠向起点(多余内容丢终点)</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041108.png" alt=""></p><p><code>justify-content:space-around</code>多余内容环绕两边</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041109.png" alt=""></p><p><code>justify-content:space-between</code>多余内容丢中间</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041110.png" alt=""></p><p><code>justify-content:space-evenly</code>多余内容均匀分布</p><p><img src="http://p3o473ll1.bkt.clouddn.com/css2018041111.png" alt=""></p><pre><code>align-items侧轴对齐方式</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items" target="_blank" rel="noopener">详见MDN</a></p><pre><code>aling-content多行对齐方式</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-content" target="_blank" rel="noopener">详见MDN</a></p><ul><li><code>flex item</code> 属性</li></ul><pre><code>flex-grow 增长比例flex-shrink 增长比例flex-basis 增长比例order 顺序 代替双飞翼布局align-self 自身对齐方式</code></pre><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="noopener">flex item MDN</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTML 1991年由李爵士提出&lt;br&gt;CSS 1994年由哈肯·维姆·莱和伯特·波斯合作设计&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://www.muzlin.cn/tags/css/"/>
    
      <category term="html" scheme="http://www.muzlin.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>实现一个jQuery的简单API的过程</title>
    <link href="http://www.muzlin.cn/2018/04/02/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAjQuery%E7%9A%84%E7%AE%80%E5%8D%95API%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.muzlin.cn/2018/04/02/实现一个jQuery的简单API的过程/</id>
    <published>2018-04-02T05:47:38.000Z</published>
    <updated>2018-04-08T15:11:29.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装几个JavaScript提供的API"><a href="#封装几个JavaScript提供的API" class="headerlink" title="封装几个JavaScript提供的API"></a>封装几个JavaScript提供的API</h2><blockquote><p>首先的思路是先封装几个原生js提供的api，然后在实验以哪种方式来调用比较合适</p></blockquote><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前节点的所有兄弟</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSiblings</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取父元素下的所有子元素</span></span><br><span class="line">  <span class="keyword">var</span> children = node.parentNode.children</span><br><span class="line">  <span class="comment">// 声明结果存放的对象</span></span><br><span class="line">  <span class="keyword">var</span> array = &#123;</span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历获取到的所有元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (children[i] !== <span class="keyword">this</span>) &#123;</span><br><span class="line">      array[array.length] = children[i]</span><br><span class="line">      array.length += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加css样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span> (<span class="params">node,classes</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历classes参数组然后添加到节点元素上</span></span><br><span class="line">  classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> node.classList.add(value) )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><a id="more"></a><h2 id="怎么将这两个函数关联起来"><a href="#怎么将这两个函数关联起来" class="headerlink" title="怎么将这两个函数关联起来"></a>怎么将这两个函数关联起来</h2><pre><code>a. 以命名空间的方式关联<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.leeDom = &#123;&#125;</span><br><span class="line">leeDom.getSiblings = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取父元素下的所有子元素</span></span><br><span class="line">  <span class="keyword">var</span> allChildren = node.parentNode.children</span><br><span class="line">  <span class="comment">// 声明结果存放的对象</span></span><br><span class="line">  <span class="keyword">var</span> array = &#123;</span><br><span class="line">  length: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历获取到的所有元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (allChildren[i] !== <span class="keyword">this</span>) &#123;</span><br><span class="line">    array[array.length] = allChildren[i]</span><br><span class="line">    array.length += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line">leeDom.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">node,classes</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历classes参数组然后添加到节点元素上</span></span><br><span class="line">  classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> node.classList.add(value) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.g.</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p id=x&gt;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">leeDom.getSiblings(x)</span></span><br><span class="line"><span class="regexp">leeDom.addClass(x)</span></span><br></pre></td></tr></table></figure>&gt;这种方式的可以将N个方法丢在你最近的命名空间里面，因为在你自己的命名空间里所以不会对别人的库造成冲突&gt; 缺点就是每次使用的时候都要使用leeDom去点里面的方法，那能不能变成x.AddClass/x.GetSiblings这样的方式呢？b. 更改Node的原型公有属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Node.prototype.getSiblings = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> allChildren = <span class="keyword">this</span>.parentNode.children</span><br><span class="line">  <span class="keyword">var</span> array = &#123;</span><br><span class="line">    length: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (allChildren[i] !== <span class="keyword">this</span>) &#123;</span><br><span class="line">      array[array.length] = allChildren[i]</span><br><span class="line">      array.length += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line">Node.prototype.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">classes</span>) </span>&#123;</span><br><span class="line">  classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="keyword">this</span>.classList.add(value) )</span><br><span class="line">&#125;</span><br><span class="line">e.g.</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p id=x&gt;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">x.getSiblings()</span></span><br><span class="line"><span class="regexp">x.addClass()</span></span><br></pre></td></tr></table></figure>&gt; 这样我们做到了x.getSiblings这种发生调用&gt; 但是这样容易造成冲突，因为你不能保证别人没有在Node的公有属性上添加你添加过的属性c. 重新干一个Node，声明一个全局的对象Node2<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Node2 = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getSiblings:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> allChildren = node.parentNode.children</span><br><span class="line">      <span class="keyword">var</span> array = &#123;</span><br><span class="line">        length: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allChildren[i] !== node) &#123;</span><br><span class="line">          array[array.length] = allChildren[i]</span><br><span class="line">          array.length += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array</span><br><span class="line">    &#125;,</span><br><span class="line">    addClass:<span class="function"><span class="keyword">function</span> (<span class="params">classes</span>) </span>&#123;</span><br><span class="line">      classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> node.classList.add(value) )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">e.g.</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p id=x&gt;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var xNode = Node2(x)</span></span><br><span class="line"><span class="regexp">xNode.getSiblings()</span></span><br><span class="line"><span class="regexp">xNode.addClass()</span></span><br></pre></td></tr></table></figure>d.考虑将Node2换个成jQuery<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getSiblings:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> allChildren = node.parentNode.children</span><br><span class="line">      <span class="keyword">var</span> array = &#123;</span><br><span class="line">        length: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allChildren[i] !== node) &#123;</span><br><span class="line">          array[array.length] = allChildren[i]</span><br><span class="line">          array.length += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array</span><br><span class="line">    &#125;,</span><br><span class="line">    addClass:<span class="function"><span class="keyword">function</span> (<span class="params">classes</span>) </span>&#123;</span><br><span class="line">      classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> node.classList.add(value) )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">e.g.</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p id=x&gt;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var xNode = jQuery(x)</span></span><br><span class="line"><span class="regexp">xNode.getSiblings()</span></span><br><span class="line"><span class="regexp">xNode.addClass()</span></span><br></pre></td></tr></table></figure>e. 完善我们的简易jQuery&gt;将传入参数变为节点或者选择器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">    node = <span class="built_in">document</span>.querySelector(nodeOrSelector)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    node = nodeOrSelector</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">e.g.</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p id=x&gt;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var xNode = jQuery('div &gt; p')</span></span><br><span class="line"><span class="regexp">xNode.getSiblings()</span></span><br><span class="line"><span class="regexp">xNode.addClass()</span></span><br></pre></td></tr></table></figure>&gt;操作单个或者多个节点<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> temps = <span class="built_in">document</span>.querySelector(nodeOrSelector)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; temps.length;i++)&#123;</span><br><span class="line">      nodes[i] = temps[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temps.length</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;</span><br><span class="line">    nodes = &#123;</span><br><span class="line">      <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">      length: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只操作一个节点</span></span><br><span class="line">  nodes.getSiblings = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nodes.length === <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> allChildren = nodes[<span class="number">0</span>].parentNode.children</span><br><span class="line">      <span class="keyword">var</span> array = &#123;</span><br><span class="line">        length: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allChildren.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (allChildren[i] !== <span class="keyword">this</span>) &#123;</span><br><span class="line">          array[array.length] = allChildren[i]</span><br><span class="line">          array.length += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">classes</span>) </span>&#123;</span><br><span class="line">    classes.forEach( <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nodes.length; i++)&#123;</span><br><span class="line">        nodes[i].classList.add(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&gt;添加其它方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  nodes.text = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(text === <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> texts = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class="line">        text.pust = nodes[i].textContent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> texts</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++)&#123;</span><br><span class="line">         nodes[i].textContent = text</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>alias一下吧  window.$ = jQuery<br> 完。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;封装几个JavaScript提供的API&quot;&gt;&lt;a href=&quot;#封装几个JavaScript提供的API&quot; class=&quot;headerlink&quot; title=&quot;封装几个JavaScript提供的API&quot;&gt;&lt;/a&gt;封装几个JavaScript提供的API&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先的思路是先封装几个原生js提供的api，然后在实验以哪种方式来调用比较合适&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取当前节点的所有兄弟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSiblings&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 获取父元素下的所有子元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = node.parentNode.children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 声明结果存放的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 遍历获取到的所有元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; children.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (children[i] !== &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      array[array.length] = children[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      array.length += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加css样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addClass&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;node,classes&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 遍历classes参数组然后添加到节点元素上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  classes.forEach( &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; node.classList.add(value) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.muzlin.cn/categories/javascript/"/>
    
    
      <category term="jQuery" scheme="http://www.muzlin.cn/tags/jQuery/"/>
    
      <category term="javascript" scheme="http://www.muzlin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Document Object Model 文档对象模型 DOM</title>
    <link href="http://www.muzlin.cn/2018/03/23/Document-Object-Model-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-DOM/"/>
    <id>http://www.muzlin.cn/2018/03/23/Document-Object-Model-文档对象模型-DOM/</id>
    <published>2018-03-23T01:46:50.000Z</published>
    <updated>2018-03-23T01:46:50.195Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS a=3 是声明全局变量吗?</title>
    <link href="http://www.muzlin.cn/2018/03/22/JS-a-3-%E6%98%AF%E5%A3%B0%E6%98%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%90%97/"/>
    <id>http://www.muzlin.cn/2018/03/22/JS-a-3-是声明全局变量吗/</id>
    <published>2018-03-22T08:09:22.000Z</published>
    <updated>2018-03-22T13:53:18.293Z</updated>
    
    <content type="html"><![CDATA[<p>1.作用域</p><p>2.变量提升</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.作用域&lt;/p&gt;
&lt;p&gt;2.变量提升&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>疯狂打call JS Function 的硬核调用</title>
    <link href="http://www.muzlin.cn/2018/03/22/%E7%96%AF%E7%8B%82%E6%89%93call-JS-Function-%E7%9A%84%E7%A1%AC%E6%A0%B8%E8%B0%83%E7%94%A8/"/>
    <id>http://www.muzlin.cn/2018/03/22/疯狂打call-JS-Function-的硬核调用/</id>
    <published>2018-03-22T06:47:11.000Z</published>
    <updated>2018-03-22T06:47:11.349Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端笔记-持续更新</title>
    <link href="http://www.muzlin.cn/2018/02/21/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.muzlin.cn/2018/02/21/前端笔记-持续更新/</id>
    <published>2018-02-21T13:54:57.000Z</published>
    <updated>2018-02-28T13:46:17.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端笔记"><a href="#前端笔记" class="headerlink" title="前端笔记"></a>前端笔记</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p><strong><em>超文本标记语言(Hypertext Markup Language)</em></strong></p><ul><li><p>html 只管元素的语义 <code>e.g. &lt;p&gt;段落&lt;/p&gt; &lt;kbd&gt;键盘&lt;/kqb&gt;</code> 不管元素的样式 以及是否为块级、行内<br>  这些由css控制 除了<code>&lt;span&gt;&lt;/span&gt; &lt;div&gt;&lt;/div&gt;</code> 其它元素都有默认样式 <code>div span</code> 没有任务语义</p><blockquote><p>所以你问html某个元素是什么样式 html：滚~</p></blockquote></li></ul><a id="more"></a><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端笔记&quot;&gt;&lt;a href=&quot;#前端笔记&quot; class=&quot;headerlink&quot; title=&quot;前端笔记&quot;&gt;&lt;/a&gt;前端笔记&lt;/h2&gt;&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;超文本标记语言(Hypertext Markup Language)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html 只管元素的语义 &lt;code&gt;e.g. &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt; &amp;lt;kbd&amp;gt;键盘&amp;lt;/kqb&amp;gt;&lt;/code&gt; 不管元素的样式 以及是否为块级、行内&lt;br&gt;  这些由css控制 除了&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 其它元素都有默认样式 &lt;code&gt;div span&lt;/code&gt; 没有任务语义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以你问html某个元素是什么样式 html：滚~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="笔记" scheme="http://www.muzlin.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Heap/Stack 堆/栈 的简单解释</title>
    <link href="http://www.muzlin.cn/2018/02/06/Heap-Stack-%E5%A0%86-%E6%A0%88-%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>http://www.muzlin.cn/2018/02/06/Heap-Stack-堆-栈-的简单解释/</id>
    <published>2018-02-06T15:29:44.000Z</published>
    <updated>2018-02-07T00:56:46.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天看了阮一峰 阮老师的博客 <a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">汇编语言入门教程</a> 汇编是看得一知半解，倒是对Heap(堆)Stack(栈)的理解有了更清晰的认识</p></blockquote><a id="more"></a><h3 id="内存模型-Heap"><a href="#内存模型-Heap" class="headerlink" title="内存模型 Heap"></a>内存模型 Heap</h3><p>程序运行的时候，操作系统会给它分配一段内存，用来存储程序和程序运行时产生的数据。</p><p>这段内存有起始地址和结束地址，比如<code>0x1000</code>-<code>0x8000</code>，起始地址小的是开始大的是结束</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack01.png" alt="阮老师博客配图"></p><p>程序运行过程中，对于动态的内存占用请求(比如新建对象),系统会从预先分配好的内存中划出一部分，这一部分就是Heap(堆),它的特点是不会自动消失，必须手动释放，或者由垃圾回来机制来回收。</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack02.png" alt="配图02"></p><p>对堆而言，数据项位置没有固定的顺序。你可以以任何顺序插入和删除，因为他们没有“顶部”数据这一概念。</p><h3 id="内存模型-Stack"><a href="#内存模型-Stack" class="headerlink" title="内存模型 Stack"></a>内存模型 Stack</h3><p>函数运行的时候，会在预分配的内存中临时占用一段区域，这段区域就是Stack(栈)</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack03.png" alt="配图03"></p><p>以下面的例子为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统执行<code>main</code>函数的时候，内存里面会建立一个帧(frame)，变量a和b会保存在这个帧里面，执行完成的时候该帧回收并且释放内部变量。</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack04.png" alt="配图04"></p><p>如果在<code>main</code>内部在调用一个其他函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数执行到<code>add</code>函数的时候，会继续在Stack上建立一个帧，当<code>add</code>执行完的时候立即释放，继续执行整个函数执行完的时候这个Stack就全部释放。</p><p>系统首先创建的是的是<code>main</code>的帧，然后创建<code>add</code>的帧。执行后先释放<code>add</code>的帧，然后释放<code>main</code>的帧，所有对于栈来说是先进后出的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当程序启动的时候，设置堆得大小但是可以扩展，它是无序的。当线程创建(程序执行)的时候，系统为每一个系统级的线程创建栈，栈属于线程当线程完成栈释放，栈是有序的先进后出。栈比堆要快，因为它存取模式使它可以轻松的分配和重新分配内存（指针/整型只是进行简单的递增或者递减运算），然而堆在分配和释放的时候有更多的复杂的 bookkeeping 参与。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天看了阮一峰 阮老师的博客 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汇编语言入门教程&lt;/a&gt; 汇编是看得一知半解，倒是对Heap(堆)Stack(栈)的理解有了更清晰的认识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://www.muzlin.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="内存" scheme="http://www.muzlin.cn/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="堆栈" scheme="http://www.muzlin.cn/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>CSRF是什么?</title>
    <link href="http://www.muzlin.cn/2018/02/06/CSRF%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://www.muzlin.cn/2018/02/06/CSRF是什么/</id>
    <published>2018-02-06T02:32:54.000Z</published>
    <updated>2018-02-06T03:23:18.531Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跨站请求伪造（csrf）是一种劫持受信任用户向服务器发送非预期请求的攻击方式。例如，这些非预期请求可能在url后加入一些恶意的参数，从而达到攻击者的目的。</p></blockquote><a id="more"></a><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><pre><code>其他人通过csrf攻击盗用你的网站用户身份。你这个网站用户所拥有的权限那他就都可以使用，比如用你的身份发消息、购买物品、转账等等。</code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>A:用户的信任网站 B:危险网站.成功登录A网站  这里浏览器会产生cookie.打开B网站 .B网站事先摸清了A网站的请求套路，比如转账的请求是:/zhuangzhang .此时打开B网站会有请求到A网站,并且携带了A网站的cookie .A的服务器会认为这是一个正常的处理，这样B就达到了模拟用户操作的目的</code></pre><h3 id="常见攻击类型"><a href="#常见攻击类型" class="headerlink" title="常见攻击类型"></a>常见攻击类型</h3><ul><li><p>GET类型的csrf</p><p>  某网站可以上传图片，然后小明上传了图片如下</p><p>  <code>&lt;img src=http://jirengu.com/csrf?xx=11 /&gt;</code></p><p>  当用户访问到有此图片的页面时就完成了一次csrf攻击</p></li><li><p>POST类型的csrf</p><p>  用户在登录他所信任的的网站之后又访问了危险网站</p><p>  危险网站内有这样一段代码</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">http://jirengu.com/csrf.php</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xx"</span> <span class="attr">value</span>=<span class="string">"11"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> document.forms[0].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  访问此页面后 表单就会提交 此时就完成了一次post的csrf攻击</p></li></ul><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul><li><p>验证 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener">HTTP Referer</a> 字段</p><p>  http协议中，http头有一个字段叫 referer ，他记录了该请求的来源。</p><p>  请求验证的时候，判断请求来源是否合法，不合法就拒绝并送他一句MMP..</p><p>  但是referer是可以篡改的，就断有些浏览器无法篡改对于某些注重隐私的组织来说这种方法也不实用。</p></li><li><p>添加token</p><p>  csrf的原理就是伪造用户的请求，那可以制造一种不能伪造或者很难伪造的请求。</p><p>  我们可以再http请求中加一个随机产生的token，在服务器验证token</p><p>  如果token不合法那就送他一句MMP吧</p><p>  但是这种方法也有很大缺点，比如每个请求都需要携带token增加了开发成本</p><p>  而且，通过referer也可以得到token值</p></li></ul><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>csrf的危害很大，但™️ 又难于防范，并没有很完美的解决方案，只有重视才能降低伤害。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跨站请求伪造（csrf）是一种劫持受信任用户向服务器发送非预期请求的攻击方式。例如，这些非预期请求可能在url后加入一些恶意的参数，从而达到攻击者的目的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="web安全" scheme="http://www.muzlin.cn/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="http://www.muzlin.cn/2018/02/05/HTML%E6%B1%87%E6%80%BB/"/>
    <id>http://www.muzlin.cn/2018/02/05/HTML汇总/</id>
    <published>2018-02-05T08:09:57.000Z</published>
    <updated>2018-02-06T02:14:44.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTML(HyperText Markup Language 超文本标记语言)是用来定义网页结构的一种语言。<br>参考一些教程在这里汇总一下，加深记忆以及方便以后查阅。</p></blockquote><a id="more"></a><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="http://p3o473ll1.bkt.clouddn.com/html-hz01.png" alt="MDN" title="图片来自MDN"></p><pre><code>开始标签（Opening tag）：包括元素的名称（在本例中，p），包裹在开始和结束尖括号中。这表示元素开始或开始生效 - 在这种情况下，表示了一个段落的开头。结束标签（Closing tag）：这与开始标记相同，除了它在元素名称之前包含正斜杠。这表示元素结束的位置 - 在这种情况下，表示了一个段落的结尾. 没有包含结束标记是一个常见的初学者错误，并可能导致奇怪的结果。内容（Content）：这是元素的内容，在这种情况下只是文本。元素（Element）：开始标记，加结束标记，加内容，等于元素。</code></pre><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><ul><li><p>块级元素和内联元素</p><pre><code>在HTML中有两种你需要知道的重要元素类别，块级元素和内联元素。块级元素在页面中以块的形式展现 相对与其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现内联元素通常出现在块级元素中并包裹文档内容的一小部分，而不是一整个段落或者一组内容，内联元素不会导致文本换行</code></pre></li><li><p>空元素</p><pre><code>只拥有一个标签的元素称为空元素&lt;img src=&quot;&quot; &gt;</code></pre></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img src="http://p3o473ll1.bkt.clouddn.com/html-hz02.png" alt="MDN" title="图片来自MDN"></p><pre><code>属性包含元素的额外信息，这些信息不会出现在实际的内容中。在上述例子中，这个class属性给元素赋了一个识别的名字（id），这个名字此后可以被用来识别此元素的样式信息和其他信息。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#translate" target="_blank" rel="noopener">更多属性</a></p><h3 id="HTML文档实例"><a href="#HTML文档实例" class="headerlink" title="HTML文档实例"></a>HTML文档实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML文档实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;!DOCTYPE&gt;</code></p><pre><code>声明，告诉浏览器用哪个版本的html进行渲染doctyupe 不区分大小写 但建议统一</code></pre></li><li><p><code>&lt;html&gt;</code></p><pre><code>根元素，包裹了真个完整的页面</code></pre></li><li><p><code>&lt;head&gt;</code></p><pre><code>包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容关键字、页面描述、CSS样式、字符集声明等等</code></pre></li><li><p><code>&lt;meta&gt;</code> </p><pre><code>设置页面的一些信息字符集、关键字、描述等等</code></pre></li><li><p><code>&lt;title&gt;</code></p><pre><code>页面标题，展示在浏览器标签上</code></pre></li><li><p><code>&lt;body&gt;</code></p><pre><code>包含你访问页面所显示的所有内容文本、图片、视频、音频等等</code></pre></li></ul><h3 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h3><ul><li>h1-h6 标题</li><li>p 段落</li><li>a 链接</li><li>div 盒子</li><li>header 头部</li><li>nav 导航</li><li>main 内容</li><li>section 区域</li><li>footer 尾部</li><li>em strong 强调文本</li><li>span 无效果的文本标签 用于css给文本添加样式</li><li>br 换行</li><li>ul ol dl 列表</li><li>pre 格式化 输出会保留空格和换行</li><li>cite q 引用</li><li>img 图片</li><li>ifame 嵌入其他页面</li><li>video audio 音频</li><li>table thead tr th/td 表格</li><li>from 表单</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTML(HyperText Markup Language 超文本标记语言)是用来定义网页结构的一种语言。&lt;br&gt;参考一些教程在这里汇总一下，加深记忆以及方便以后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.muzlin.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>江湖菜-翠云水煮鱼</title>
    <link href="http://www.muzlin.cn/2018/02/04/%E6%B1%9F%E6%B9%96%E8%8F%9C-%E7%BF%A0%E4%BA%91%E6%B0%B4%E7%85%AE%E9%B1%BC/"/>
    <id>http://www.muzlin.cn/2018/02/04/江湖菜-翠云水煮鱼/</id>
    <published>2018-02-04T06:28:22.000Z</published>
    <updated>2018-02-04T07:32:46.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>水煮鱼，那几乎都是所有川菜、渝菜店里都会有的硬菜。重庆市渝北区是全国著名的水煮鱼之乡，翠云水煮是根据地名而取的一家店名，其中的招牌菜之一便是水煮鱼。翠云水煮鱼以鲜鱼、滚油、色泽红亮、麻辣浓香，鱼片外酥里嫩，味道醇厚的独特风味，是重庆正宗美食的代表之一。</p><p>今天周末，刚好来试一试，记录一下生活🤣</p></blockquote><a id="more"></a><h4 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h4><ul><li>草鱼一条 约1.72381Kg</li><li>豆芽 187.5根</li><li>其他香料稍后说明</li></ul><h4 id="处理草鱼"><a href="#处理草鱼" class="headerlink" title="处理草鱼"></a>处理草鱼</h4><ul><li><p>去菜市买一条鲜活的草鱼，将鱼分解于下图所示</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh1.jpeg" alt="分解"><br>  当然，你也可以叫鱼老板给你弄好，不用买一条活鱼(满足变态需求|(:匿)回来。</p></li><li><p>片鱼</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh2.jpg" alt="处理"></p></li><li><p>腌制</p><p>  加入适量盐、鸡精、白糖、胡椒粉、料酒，抓匀腌制20分钟入味</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh3.jpg" alt="腌制"></p></li></ul><h4 id="准备香料"><a href="#准备香料" class="headerlink" title="准备香料"></a>准备香料</h4><pre><code>洋葱、老姜、大蒜、八角、山奈、香果等香菜、小葱、大葱、蒜苗 如下图</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh4.jpg" alt="配料"></p><pre><code>抓一把干辣椒切碎备用</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh6.jpg" alt="辣椒"></p><h4 id="下油锅"><a href="#下油锅" class="headerlink" title="下油锅"></a>下油锅</h4><pre><code>油差不多是平常炒菜的5-7倍看自己喜好 大概约614.74312ML将准备好的所有香料依次下入油锅</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh11.jpg" alt="油锅"></p><pre><code>炸至这样</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh13.jpg" alt="油锅2"></p><pre><code>捞出所有香料，油乘出备用</code></pre><h4 id="煮"><a href="#煮" class="headerlink" title="煮"></a>煮</h4><pre><code>烧一锅清水(水越宽越好)水开后将豆芽煮至断生，然后放入容器铺平</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh18.jpg" alt="豆芽"></p><pre><code>将腌制好的鱼肉加入适量豆粉、鸡蛋清拌匀刚刚煮豆芽的锅中下入鱼肉煮至八分熟(泛白即可)然后均匀铺在豆芽上面</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh23.jpg" alt="煮鱼"></p><h4 id="炒制辣椒"><a href="#炒制辣椒" class="headerlink" title="炒制辣椒"></a>炒制辣椒</h4><pre><code>将开始乘出的油倒入锅中加热(稍微加热一下就行)然后将辣椒、花椒倒入，炒制变色</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh26.jpg" alt="炒辣椒"></p><h4 id="出锅"><a href="#出锅" class="headerlink" title="出锅"></a>出锅</h4><pre><code>浇油装盆，将熬制好的辣椒油，直接浇入装鱼的盆里即可</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh27.jpg" alt="出锅"></p><pre><code>完。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;水煮鱼，那几乎都是所有川菜、渝菜店里都会有的硬菜。重庆市渝北区是全国著名的水煮鱼之乡，翠云水煮是根据地名而取的一家店名，其中的招牌菜之一便是水煮鱼。翠云水煮鱼以鲜鱼、滚油、色泽红亮、麻辣浓香，鱼片外酥里嫩，味道醇厚的独特风味，是重庆正宗美食的代表之一。&lt;/p&gt;
&lt;p&gt;今天周末，刚好来试一试，记录一下生活🤣&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.muzlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="美食" scheme="http://www.muzlin.cn/tags/%E7%BE%8E%E9%A3%9F/"/>
    
      <category term="厨艺" scheme="http://www.muzlin.cn/tags/%E5%8E%A8%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>暗中观察:从URL输入到浏览器呈现页面</title>
    <link href="http://www.muzlin.cn/2018/02/03/%E6%9A%97%E4%B8%AD%E8%A7%82%E5%AF%9F-%E4%BB%8EURL%E8%BE%93%E5%85%A5%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%91%88%E7%8E%B0%E9%A1%B5%E9%9D%A2/"/>
    <id>http://www.muzlin.cn/2018/02/03/暗中观察-从URL输入到浏览器呈现页面/</id>
    <published>2018-02-03T09:05:24.000Z</published>
    <updated>2018-02-03T09:10:12.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个网页的诞生到底发生了什么，又有什么不为人知的秘密。<br>下面我们来简单探索一下。</p></blockquote><a id="more"></a><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>首先，要明白什么是DNS解析。我们平常说的网址、URL它并不是直接指向网站真正的地址。比如我们在浏览器输入<code>https://www.baidu.com</code>，它首先通过DNS解析成一个IP地址<img src="http://upload-images.jianshu.io/upload_images/10423105-a3fce842887cbe10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>我们在命令行ping一下baidu.com这个url就可以得到它指向的IP地址，大家可以发现IP地址并不容易记忆，所以才有DNS解析，把便于记忆的URL解析成网站真正的地址，这个过程就是DNS解析。方然，这个解析过程并不像描述的这么简单，其中的东西这里暂不探究，我们只简单的梳理一下页面呈现其中的过程。</p><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><p>前面的DNS把URl解析为IP地址浏览器向这个地址发起请求(中间涉及到TCP/HTTP/HTTPS等)，服务器接收到请求后进行处理。处理完成后返回HTTP报文到浏览器，其中的响应报文一般包含了页面渲染的html、css、js、图片等文件。</p><h3 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a>浏览器解析</h3><p>这时候，浏览器已经拿到了它所需要的东西，然后开始干活啦。我们平常浏览网页可以发现，如果网速慢一点网页是一点一点的加载的，这是因为浏览器一边在解析服务器返回的东西一边渲染给用户看。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上JS的解析是浏览器中的JS引擎去完成的。基本到这里整个过程已简单的梳理，当然其中还有许多复杂的细节我们这里暂不深究只浅显的秒速一下整个过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个网页的诞生到底发生了什么，又有什么不为人知的秘密。&lt;br&gt;下面我们来简单探索一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="http" scheme="http://www.muzlin.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Hello-MuzLin</title>
    <link href="http://www.muzlin.cn/2018/02/02/Hello-MuzLin/"/>
    <id>http://www.muzlin.cn/2018/02/02/Hello-MuzLin/</id>
    <published>2018-02-02T08:02:05.000Z</published>
    <updated>2018-02-06T08:03:01.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>23333<br><a id="more"></a><br>23333</p><p>3322<br>3<br>2<br>3<br>23<br>2<br>3<br>2</p><p>3<br>2</p><p>333<br>23<br>23<br>3<br>23</p><p>323</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;23333&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="http://www.muzlin.cn/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://www.muzlin.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
