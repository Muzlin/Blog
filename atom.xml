<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MuzLin</title>
  
  <subtitle>燃烧吧！狗日的生活!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.muzlin.cn/"/>
  <updated>2018-02-07T00:56:46.069Z</updated>
  <id>http://www.muzlin.cn/</id>
  
  <author>
    <name>MuzLin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Heap/Stack 堆/栈 的简单解释</title>
    <link href="http://www.muzlin.cn/2018/02/06/Heap-Stack-%E5%A0%86-%E6%A0%88-%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>http://www.muzlin.cn/2018/02/06/Heap-Stack-堆-栈-的简单解释/</id>
    <published>2018-02-06T15:29:44.000Z</published>
    <updated>2018-02-07T00:56:46.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天看了阮一峰 阮老师的博客 <a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">汇编语言入门教程</a> 汇编是看得一知半解，倒是对Heap(堆)Stack(栈)的理解有了更清晰的认识</p></blockquote><a id="more"></a><h3 id="内存模型-Heap"><a href="#内存模型-Heap" class="headerlink" title="内存模型 Heap"></a>内存模型 Heap</h3><p>程序运行的时候，操作系统会给它分配一段内存，用来存储程序和程序运行时产生的数据。</p><p>这段内存有起始地址和结束地址，比如<code>0x1000</code>-<code>0x8000</code>，起始地址小的是开始大的是结束</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack01.png" alt="阮老师博客配图"></p><p>程序运行过程中，对于动态的内存占用请求(比如新建对象),系统会从预先分配好的内存中划出一部分，这一部分就是Heap(堆),它的特点是不会自动消失，必须手动释放，或者由垃圾回来机制来回收。</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack02.png" alt="配图02"></p><p>对堆而言，数据项位置没有固定的顺序。你可以以任何顺序插入和删除，因为他们没有“顶部”数据这一概念。</p><h3 id="内存模型-Stack"><a href="#内存模型-Stack" class="headerlink" title="内存模型 Stack"></a>内存模型 Stack</h3><p>函数运行的时候，会在预分配的内存中临时占用一段区域，这段区域就是Stack(栈)</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack03.png" alt="配图03"></p><p>以下面的例子为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统执行<code>main</code>函数的时候，内存里面会建立一个帧(frame)，变量a和b会保存在这个帧里面，执行完成的时候该帧回收并且释放内部变量。</p><p><img src="http://p3o473ll1.bkt.clouddn.com/HeapStack04.png" alt="配图04"></p><p>如果在<code>main</code>内部在调用一个其他函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数执行到<code>add</code>函数的时候，会继续在Stack上建立一个帧，当<code>add</code>执行完的时候立即释放，继续执行整个函数执行完的时候这个Stack就全部释放。</p><p>系统首先创建的是的是<code>main</code>的帧，然后创建<code>add</code>的帧。执行后先释放<code>add</code>的帧，然后释放<code>main</code>的帧，所有对于栈来说是先进后出的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当程序启动的时候，设置堆得大小但是可以扩展，它是无序的。当线程创建(程序执行)的时候，系统为每一个系统级的线程创建栈，栈属于线程当线程完成栈释放，栈是有序的先进后出。栈比堆要快，因为它存取模式使它可以轻松的分配和重新分配内存（指针/整型只是进行简单的递增或者递减运算），然而堆在分配和释放的时候有更多的复杂的 bookkeeping 参与。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天看了阮一峰 阮老师的博客 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汇编语言入门教程&lt;/a&gt; 汇编是看得一知半解，倒是对Heap(堆)Stack(栈)的理解有了更清晰的认识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://www.muzlin.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="内存" scheme="http://www.muzlin.cn/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="堆栈" scheme="http://www.muzlin.cn/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>CSRF是什么?</title>
    <link href="http://www.muzlin.cn/2018/02/06/CSRF%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://www.muzlin.cn/2018/02/06/CSRF是什么/</id>
    <published>2018-02-06T02:32:54.000Z</published>
    <updated>2018-02-06T03:23:18.531Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跨站请求伪造（csrf）是一种劫持受信任用户向服务器发送非预期请求的攻击方式。例如，这些非预期请求可能在url后加入一些恶意的参数，从而达到攻击者的目的。</p></blockquote><a id="more"></a><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><pre><code>其他人通过csrf攻击盗用你的网站用户身份。你这个网站用户所拥有的权限那他就都可以使用，比如用你的身份发消息、购买物品、转账等等。</code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>A:用户的信任网站 B:危险网站.成功登录A网站  这里浏览器会产生cookie.打开B网站 .B网站事先摸清了A网站的请求套路，比如转账的请求是:/zhuangzhang .此时打开B网站会有请求到A网站,并且携带了A网站的cookie .A的服务器会认为这是一个正常的处理，这样B就达到了模拟用户操作的目的</code></pre><h3 id="常见攻击类型"><a href="#常见攻击类型" class="headerlink" title="常见攻击类型"></a>常见攻击类型</h3><ul><li><p>GET类型的csrf</p><p>  某网站可以上传图片，然后小明上传了图片如下</p><p>  <code>&lt;img src=http://jirengu.com/csrf?xx=11 /&gt;</code></p><p>  当用户访问到有此图片的页面时就完成了一次csrf攻击</p></li><li><p>POST类型的csrf</p><p>  用户在登录他所信任的的网站之后又访问了危险网站</p><p>  危险网站内有这样一段代码</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">http://jirengu.com/csrf.php</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xx"</span> <span class="attr">value</span>=<span class="string">"11"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> document.forms[0].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  访问此页面后 表单就会提交 此时就完成了一次post的csrf攻击</p></li></ul><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul><li><p>验证 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener">HTTP Referer</a> 字段</p><p>  http协议中，http头有一个字段叫 referer ，他记录了该请求的来源。</p><p>  请求验证的时候，判断请求来源是否合法，不合法就拒绝并送他一句MMP..</p><p>  但是referer是可以篡改的，就断有些浏览器无法篡改对于某些注重隐私的组织来说这种方法也不实用。</p></li><li><p>添加token</p><p>  csrf的原理就是伪造用户的请求，那可以制造一种不能伪造或者很难伪造的请求。</p><p>  我们可以再http请求中加一个随机产生的token，在服务器验证token</p><p>  如果token不合法那就送他一句MMP吧</p><p>  但是这种方法也有很大缺点，比如每个请求都需要携带token增加了开发成本</p><p>  而且，通过referer也可以得到token值</p></li></ul><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>csrf的危害很大，但™️ 又难于防范，并没有很完美的解决方案，只有重视才能降低伤害。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跨站请求伪造（csrf）是一种劫持受信任用户向服务器发送非预期请求的攻击方式。例如，这些非预期请求可能在url后加入一些恶意的参数，从而达到攻击者的目的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="web安全" scheme="http://www.muzlin.cn/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="http://www.muzlin.cn/2018/02/05/HTML%E6%B1%87%E6%80%BB/"/>
    <id>http://www.muzlin.cn/2018/02/05/HTML汇总/</id>
    <published>2018-02-05T08:09:57.000Z</published>
    <updated>2018-02-06T02:14:44.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTML(HyperText Markup Language 超文本标记语言)是用来定义网页结构的一种语言。<br>参考一些教程在这里汇总一下，加深记忆以及方便以后查阅。</p></blockquote><a id="more"></a><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="http://p3o473ll1.bkt.clouddn.com/html-hz01.png" alt="MDN" title="图片来自MDN"></p><pre><code>开始标签（Opening tag）：包括元素的名称（在本例中，p），包裹在开始和结束尖括号中。这表示元素开始或开始生效 - 在这种情况下，表示了一个段落的开头。结束标签（Closing tag）：这与开始标记相同，除了它在元素名称之前包含正斜杠。这表示元素结束的位置 - 在这种情况下，表示了一个段落的结尾. 没有包含结束标记是一个常见的初学者错误，并可能导致奇怪的结果。内容（Content）：这是元素的内容，在这种情况下只是文本。元素（Element）：开始标记，加结束标记，加内容，等于元素。</code></pre><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><ul><li><p>块级元素和内联元素</p><pre><code>在HTML中有两种你需要知道的重要元素类别，块级元素和内联元素。块级元素在页面中以块的形式展现 相对与其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现内联元素通常出现在块级元素中并包裹文档内容的一小部分，而不是一整个段落或者一组内容，内联元素不会导致文本换行</code></pre></li><li><p>空元素</p><pre><code>只拥有一个标签的元素称为空元素&lt;img src=&quot;&quot; &gt;</code></pre></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img src="http://p3o473ll1.bkt.clouddn.com/html-hz02.png" alt="MDN" title="图片来自MDN"></p><pre><code>属性包含元素的额外信息，这些信息不会出现在实际的内容中。在上述例子中，这个class属性给元素赋了一个识别的名字（id），这个名字此后可以被用来识别此元素的样式信息和其他信息。</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#translate" target="_blank" rel="noopener">更多属性</a></p><h3 id="HTML文档实例"><a href="#HTML文档实例" class="headerlink" title="HTML文档实例"></a>HTML文档实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML文档实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;!DOCTYPE&gt;</code></p><pre><code>声明，告诉浏览器用哪个版本的html进行渲染doctyupe 不区分大小写 但建议统一</code></pre></li><li><p><code>&lt;html&gt;</code></p><pre><code>根元素，包裹了真个完整的页面</code></pre></li><li><p><code>&lt;head&gt;</code></p><pre><code>包含了所有你想包含在HTML页面中但不想在HTML页面中显示的内容关键字、页面描述、CSS样式、字符集声明等等</code></pre></li><li><p><code>&lt;meta&gt;</code> </p><pre><code>设置页面的一些信息字符集、关键字、描述等等</code></pre></li><li><p><code>&lt;title&gt;</code></p><pre><code>页面标题，展示在浏览器标签上</code></pre></li><li><p><code>&lt;body&gt;</code></p><pre><code>包含你访问页面所显示的所有内容文本、图片、视频、音频等等</code></pre></li></ul><h3 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h3><ul><li>h1-h6 标题</li><li>p 段落</li><li>a 链接</li><li>div 盒子</li><li>header 头部</li><li>nav 导航</li><li>main 内容</li><li>section 区域</li><li>footer 尾部</li><li>em strong 强调文本</li><li>span 无效果的文本标签 用于css给文本添加样式</li><li>br 换行</li><li>ul ol dl 列表</li><li>pre 格式化 输出会保留空格和换行</li><li>cite q 引用</li><li>img 图片</li><li>ifame 嵌入其他页面</li><li>video audio 音频</li><li>table thead tr th/td 表格</li><li>from 表单</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTML(HyperText Markup Language 超文本标记语言)是用来定义网页结构的一种语言。&lt;br&gt;参考一些教程在这里汇总一下，加深记忆以及方便以后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.muzlin.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>江湖菜-翠云水煮鱼</title>
    <link href="http://www.muzlin.cn/2018/02/04/%E6%B1%9F%E6%B9%96%E8%8F%9C-%E7%BF%A0%E4%BA%91%E6%B0%B4%E7%85%AE%E9%B1%BC/"/>
    <id>http://www.muzlin.cn/2018/02/04/江湖菜-翠云水煮鱼/</id>
    <published>2018-02-04T06:28:22.000Z</published>
    <updated>2018-02-04T07:32:46.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>水煮鱼，那几乎都是所有川菜、渝菜店里都会有的硬菜。重庆市渝北区是全国著名的水煮鱼之乡，翠云水煮是根据地名而取的一家店名，其中的招牌菜之一便是水煮鱼。翠云水煮鱼以鲜鱼、滚油、色泽红亮、麻辣浓香，鱼片外酥里嫩，味道醇厚的独特风味，是重庆正宗美食的代表之一。</p><p>今天周末，刚好来试一试，记录一下生活🤣</p></blockquote><a id="more"></a><h4 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h4><ul><li>草鱼一条 约1.72381Kg</li><li>豆芽 187.5根</li><li>其他香料稍后说明</li></ul><h4 id="处理草鱼"><a href="#处理草鱼" class="headerlink" title="处理草鱼"></a>处理草鱼</h4><ul><li><p>去菜市买一条鲜活的草鱼，将鱼分解于下图所示</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh1.jpeg" alt="分解"><br>  当然，你也可以叫鱼老板给你弄好，不用买一条活鱼(满足变态需求|(:匿)回来。</p></li><li><p>片鱼</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh2.jpg" alt="处理"></p></li><li><p>腌制</p><p>  加入适量盐、鸡精、白糖、胡椒粉、料酒，抓匀腌制20分钟入味</p><p>  <img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh3.jpg" alt="腌制"></p></li></ul><h4 id="准备香料"><a href="#准备香料" class="headerlink" title="准备香料"></a>准备香料</h4><pre><code>洋葱、老姜、大蒜、八角、山奈、香果等香菜、小葱、大葱、蒜苗 如下图</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh4.jpg" alt="配料"></p><pre><code>抓一把干辣椒切碎备用</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh6.jpg" alt="辣椒"></p><h4 id="下油锅"><a href="#下油锅" class="headerlink" title="下油锅"></a>下油锅</h4><pre><code>油差不多是平常炒菜的5-7倍看自己喜好 大概约614.74312ML将准备好的所有香料依次下入油锅</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh11.jpg" alt="油锅"></p><pre><code>炸至这样</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh13.jpg" alt="油锅2"></p><pre><code>捞出所有香料，油乘出备用</code></pre><h4 id="煮"><a href="#煮" class="headerlink" title="煮"></a>煮</h4><pre><code>烧一锅清水(水越宽越好)水开后将豆芽煮至断生，然后放入容器铺平</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh18.jpg" alt="豆芽"></p><pre><code>将腌制好的鱼肉加入适量豆粉、鸡蛋清拌匀刚刚煮豆芽的锅中下入鱼肉煮至八分熟(泛白即可)然后均匀铺在豆芽上面</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh23.jpg" alt="煮鱼"></p><h4 id="炒制辣椒"><a href="#炒制辣椒" class="headerlink" title="炒制辣椒"></a>炒制辣椒</h4><pre><code>将开始乘出的油倒入锅中加热(稍微加热一下就行)然后将辣椒、花椒倒入，炒制变色</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh26.jpg" alt="炒辣椒"></p><h4 id="出锅"><a href="#出锅" class="headerlink" title="出锅"></a>出锅</h4><pre><code>浇油装盆，将熬制好的辣椒油，直接浇入装鱼的盆里即可</code></pre><p><img src="http://p3m4tgnaj.bkt.clouddn.com/cyszh27.jpg" alt="出锅"></p><pre><code>完。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;水煮鱼，那几乎都是所有川菜、渝菜店里都会有的硬菜。重庆市渝北区是全国著名的水煮鱼之乡，翠云水煮是根据地名而取的一家店名，其中的招牌菜之一便是水煮鱼。翠云水煮鱼以鲜鱼、滚油、色泽红亮、麻辣浓香，鱼片外酥里嫩，味道醇厚的独特风味，是重庆正宗美食的代表之一。&lt;/p&gt;
&lt;p&gt;今天周末，刚好来试一试，记录一下生活🤣&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.muzlin.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="美食" scheme="http://www.muzlin.cn/tags/%E7%BE%8E%E9%A3%9F/"/>
    
      <category term="厨艺" scheme="http://www.muzlin.cn/tags/%E5%8E%A8%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>暗中观察:从URL输入到浏览器呈现页面</title>
    <link href="http://www.muzlin.cn/2018/02/03/%E6%9A%97%E4%B8%AD%E8%A7%82%E5%AF%9F-%E4%BB%8EURL%E8%BE%93%E5%85%A5%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%91%88%E7%8E%B0%E9%A1%B5%E9%9D%A2/"/>
    <id>http://www.muzlin.cn/2018/02/03/暗中观察-从URL输入到浏览器呈现页面/</id>
    <published>2018-02-03T09:05:24.000Z</published>
    <updated>2018-02-03T09:10:12.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个网页的诞生到底发生了什么，又有什么不为人知的秘密。<br>下面我们来简单探索一下。</p></blockquote><a id="more"></a><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>首先，要明白什么是DNS解析。我们平常说的网址、URL它并不是直接指向网站真正的地址。比如我们在浏览器输入<code>https://www.baidu.com</code>，它首先通过DNS解析成一个IP地址<img src="http://upload-images.jianshu.io/upload_images/10423105-a3fce842887cbe10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>我们在命令行ping一下baidu.com这个url就可以得到它指向的IP地址，大家可以发现IP地址并不容易记忆，所以才有DNS解析，把便于记忆的URL解析成网站真正的地址，这个过程就是DNS解析。方然，这个解析过程并不像描述的这么简单，其中的东西这里暂不探究，我们只简单的梳理一下页面呈现其中的过程。</p><h3 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h3><p>前面的DNS把URl解析为IP地址浏览器向这个地址发起请求(中间涉及到TCP/HTTP/HTTPS等)，服务器接收到请求后进行处理。处理完成后返回HTTP报文到浏览器，其中的响应报文一般包含了页面渲染的html、css、js、图片等文件。</p><h3 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a>浏览器解析</h3><p>这时候，浏览器已经拿到了它所需要的东西，然后开始干活啦。我们平常浏览网页可以发现，如果网速慢一点网页是一点一点的加载的，这是因为浏览器一边在解析服务器返回的东西一边渲染给用户看。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上JS的解析是浏览器中的JS引擎去完成的。基本到这里整个过程已简单的梳理，当然其中还有许多复杂的细节我们这里暂不深究只浅显的秒速一下整个过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个网页的诞生到底发生了什么，又有什么不为人知的秘密。&lt;br&gt;下面我们来简单探索一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.muzlin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="http" scheme="http://www.muzlin.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Hello-MuzLin</title>
    <link href="http://www.muzlin.cn/2018/02/02/Hello-MuzLin/"/>
    <id>http://www.muzlin.cn/2018/02/02/Hello-MuzLin/</id>
    <published>2018-02-02T08:02:05.000Z</published>
    <updated>2018-02-06T08:03:01.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>23333<br><a id="more"></a><br>23333</p><p>3322<br>3<br>2<br>3<br>23<br>2<br>3<br>2</p><p>3<br>2</p><p>333<br>23<br>23<br>3<br>23</p><p>323</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;23333&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="http://www.muzlin.cn/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://www.muzlin.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
